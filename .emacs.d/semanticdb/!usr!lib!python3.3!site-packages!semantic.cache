;; Object site-packages/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "site-packages/"
  :tables
  (list
    (semanticdb-table "mosquitto.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
This is an MQTT v3.1 client module. MQTT is a lightweight pub/sub messaging
protocol that is easy to implement and suitable for low powered devices.
\"\"\"" code nil nil [1852 2008])
            ("errno" include nil nil [2009 2021])
            ("platform" include nil nil [2022 2037])
            ("random" include nil nil [2038 2051])
            ("select" include nil nil [2052 2065])
            ("socket" include nil nil [2066 2079])
            ("ssl" include nil nil [2080 2090])
            ("struct" include nil nil [2091 2104])
            ("sys" include nil nil [2105 2115])
            ("threading" include nil nil [2116 2132])
            ("time" include nil nil [2133 2144])
            ("MOSQUITTO_MAJOR" variable nil nil [2146 2163])
            ("MOSQUITTO_MINOR" variable nil nil [2164 2181])
            ("MOSQUITTO_REVISION" variable nil nil [2182 2202])
            ("MOSQUITTO_VERSION_NUMBER" variable nil nil [2203 2293])
            ("if" code nil nil [2295 2396])
            ("if" code nil nil [2397 2490])
            ("PROTOCOL_VERSION" variable nil nil [2491 2511])
            ("CONNECT" variable nil nil [2529 2543])
            ("CONNACK" variable nil nil [2544 2558])
            ("PUBLISH" variable nil nil [2559 2573])
            ("PUBACK" variable nil nil [2574 2587])
            ("PUBREC" variable nil nil [2588 2601])
            ("PUBREL" variable nil nil [2602 2615])
            ("PUBCOMP" variable nil nil [2616 2630])
            ("SUBSCRIBE" variable nil nil [2631 2647])
            ("SUBACK" variable nil nil [2648 2661])
            ("UNSUBSCRIBE" variable nil nil [2662 2680])
            ("UNSUBACK" variable nil nil [2681 2696])
            ("PINGREQ" variable nil nil [2697 2711])
            ("PINGRESP" variable nil nil [2712 2727])
            ("DISCONNECT" variable nil nil [2728 2745])
            ("MOSQ_LOG_INFO" variable nil nil [2760 2780])
            ("MOSQ_LOG_NOTICE" variable nil nil [2781 2803])
            ("MOSQ_LOG_WARNING" variable nil nil [2804 2827])
            ("MOSQ_LOG_ERR" variable nil nil [2828 2847])
            ("MOSQ_LOG_DEBUG" variable nil nil [2848 2869])
            ("CONNACK_ACCEPTED" variable nil nil [2887 2907])
            ("CONNACK_REFUSED_PROTOCOL_VERSION" variable nil nil [2908 2944])
            ("CONNACK_REFUSED_IDENTIFIER_REJECTED" variable nil nil [2945 2984])
            ("CONNACK_REFUSED_SERVER_UNAVAILABLE" variable nil nil [2985 3023])
            ("CONNACK_REFUSED_BAD_USERNAME_PASSWORD" variable nil nil [3024 3065])
            ("CONNACK_REFUSED_NOT_AUTHORIZED" variable nil nil [3066 3100])
            ("mosq_cs_new" variable nil nil [3121 3136])
            ("mosq_cs_connected" variable nil nil [3137 3158])
            ("mosq_cs_disconnecting" variable nil nil [3159 3184])
            ("mosq_cs_connect_async" variable nil nil [3185 3210])
            ("mosq_md_invalid" variable nil nil [3232 3251])
            ("mosq_md_in" variable nil nil [3252 3266])
            ("mosq_md_out" variable nil nil [3267 3282])
            ("mosq_ms_invalid" variable nil nil [3300 3320])
            ("mosq_ms_wait_puback" variable nil nil [3321 3344])
            ("mosq_ms_wait_pubrec" variable nil nil [3345 3368])
            ("mosq_ms_wait_pubrel" variable nil nil [3369 3392])
            ("mosq_ms_wait_pubcomp" variable nil nil [3393 3417])
            ("MOSQ_ERR_AGAIN" code nil nil [3434 3453])
            ("MOSQ_ERR_SUCCESS" variable nil nil [3454 3474])
            ("MOSQ_ERR_NOMEM" variable nil nil [3475 3493])
            ("MOSQ_ERR_PROTOCOL" variable nil nil [3494 3515])
            ("MOSQ_ERR_INVAL" variable nil nil [3516 3534])
            ("MOSQ_ERR_NO_CONN" variable nil nil [3535 3555])
            ("MOSQ_ERR_CONN_REFUSED" variable nil nil [3556 3581])
            ("MOSQ_ERR_NOT_FOUND" variable nil nil [3582 3604])
            ("MOSQ_ERR_CONN_LOST" variable nil nil [3605 3627])
            ("MOSQ_ERR_TLS" variable nil nil [3628 3644])
            ("MOSQ_ERR_PAYLOAD_SIZE" variable nil nil [3645 3670])
            ("MOSQ_ERR_NOT_SUPPORTED" variable nil nil [3671 3698])
            ("MOSQ_ERR_AUTH" variable nil nil [3699 3717])
            ("MOSQ_ERR_ACL_DENIED" variable nil nil [3718 3742])
            ("MOSQ_ERR_UNKNOWN" variable nil nil [3743 3764])
            ("MOSQ_ERR_ERRNO" variable nil nil [3765 3784])
            ("_fix_sub_topic" function (:arguments 
              ( ("subtopic" variable nil (reparse-symbol function_parameters) [3806 3814]))              ) nil [3787 4076])
            ("error_string" function
               (:documentation "Return the error string associated with a mosquitto error number."
                :arguments 
                  ( ("mosq_errno" variable nil (reparse-symbol function_parameters) [4095 4105]))                  )
                nil [4078 5520])
            ("connack_string" function
               (:documentation "Return the string associated with a CONNACK result."
                :arguments 
                  ( ("connack_code" variable nil (reparse-symbol function_parameters) [5541 5553]))                  )
                nil [5522 6185])
            ("topic_matches_sub" function
               (:documentation "Check whether a topic matches a subscription.

    For example:

    foo/bar would match the subscription foo/# or +/bar
    non/matching would not match the subscription non/+/+
    "
                :arguments 
                  ( ("sub" variable nil (reparse-symbol function_parameters) [6209 6212])
                    ("topic" variable nil (reparse-symbol function_parameters) [6214 6219]))                  )
                nil [6187 7743])
            ("MosquittoMessage" type
               (:documentation " This is a class that describes an incoming message. It is passed to the
    on_message callback as the message parameter.

    Members:

    topic : String. topic that the message was published on.
    payload : String/bytes the message payload.
    qos : Integer. The message Quality of Service 0, 1 or 2.
    retain : Boolean. If true, the message is a retained message and not fresh.
    mid : Integer. The message id.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8239 8257])
                            ("self" variable nil (reparse-symbol indented_block_body) [8266 8298])
                            ("self" variable nil (reparse-symbol indented_block_body) [8307 8335])
                            ("self" variable nil (reparse-symbol indented_block_body) [8344 8360])
                            ("self" variable nil (reparse-symbol indented_block_body) [8369 8381])
                            ("self" variable nil (reparse-symbol indented_block_body) [8390 8405])
                            ("self" variable nil (reparse-symbol indented_block_body) [8414 8433])
                            ("self" variable nil (reparse-symbol indented_block_body) [8442 8454])
                            ("self" variable nil (reparse-symbol indented_block_body) [8463 8482]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8224 8228]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8211 8483]))                  
                :type "class")
                nil [7745 8483])
            ("MosquittoInPacket" type
               (:documentation "Internal datatype."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8571 8587])
                            ("self" variable nil (reparse-symbol indented_block_body) [8596 8619])
                            ("self" variable nil (reparse-symbol indented_block_body) [8628 8653])
                            ("self" variable nil (reparse-symbol indented_block_body) [8662 8685])
                            ("self" variable nil (reparse-symbol indented_block_body) [8694 8719])
                            ("\"\"" code nil (reparse-symbol indented_block_body) [8743 8745])
                            ("self" variable nil (reparse-symbol indented_block_body) [8754 8773])
                            ("self" variable nil (reparse-symbol indented_block_body) [8782 8794]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8556 8560]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8543 8795])
                    ("cleanup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8812 8816]))                          )
                        (reparse-symbol indented_block_body) [8800 8843]))                  
                :type "class")
                nil [8485 8843])
            ("MosquittoPacket" type
               (:documentation "Internal datatype."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8956 8978])
                            ("self" variable nil (reparse-symbol indented_block_body) [8987 9001])
                            ("self" variable nil (reparse-symbol indented_block_body) [9010 9024])
                            ("self" variable nil (reparse-symbol indented_block_body) [9033 9045])
                            ("self" variable nil (reparse-symbol indented_block_body) [9054 9083])
                            ("self" variable nil (reparse-symbol indented_block_body) [9092 9112]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8914 8918])
                            ("command" variable nil (reparse-symbol function_parameters) [8920 8927])
                            ("packet" variable nil (reparse-symbol function_parameters) [8929 8935])
                            ("mid" variable nil (reparse-symbol function_parameters) [8937 8940])
                            ("qos" variable nil (reparse-symbol function_parameters) [8942 8945]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8901 9113]))                  
                :type "class")
                nil [8845 9113])
            ("Mosquitto" type
               (:documentation "MQTT version 3.1 client class.

    This is the main class for use communicating with an MQTT broker.

    General usage flow:

    * Use connect()/connect_async() to connect to a broker
    * Call loop() frequently to maintain network traffic flow with the broker
    * Or use loop_start() to set a thread running to call loop() for you.
    * Or use loop_forever() to handle calling loop() for you in a blocking
    * function.
    * Use subscribe() to subscribe to a topic and receive messages
    * Use publish() to send messages
    * Use disconnect() to disconnect from the broker

    Data returned from the broker is made available with the use of callback
    functions as described below.

    Callbacks
    =========

    A number of callback functions are available to receive data back from the
    broker. To use a callback, define a function and then assign it to the
    client:

    def on_connect(mosq, userdata, rc):
        print(\"Connection returned \" + str(rc))

    client.on_connect = on_connect

    All of the callbacks as described below have a \"mosq\" and an \"userdata\"
    argument. \"mosq\" is the Mosquitto instance that is calling the callback.
    \"userdata\" is user data of any type and can be set when creating a new
    client instance or with user_data_set(userdata).

    The callbacks:

    on_connect(mosq, userdata, rc): called when the broker responds to our
      connection request. The value of rc determines success or not:
      0: Connection successful
      1: Connection refused - incorrect protocol version
      2: Connection refused - invalid client identifier
      3: Connection refused - server unavailable
      4: Connection refused - bad username or password
      5: Connection refused - not authorised
      6-255: Currently unused.

    on_disconnect(mosq, userdata, rc): called when the client disconnects from
      the broker. The rc parameter indicates the disconnection state. If
      MOSQ_ERR_SUCCESS (0), the callback was called in response to a
      disconnect() call. If any other value the disconnection was unexpected,
      such as might be caused by a network error.

    on_message(mosq, userdata, message): called when a message has been
      received on a topic that the client subscribes to. The message variable
      is a MosquittoMessage that describes all of the message parameters.

    on_publish(mosq, userdata, mid): called when a message that was to be sent
      using the publish() call has completed transmission to the broker. For
      messages with QoS levels 1 and 2, this means that the appropriate
      handshakes have completed. For QoS 0, this simply means that the message
      has left the client. The mid variable matches the mid variable returned
      from the corresponding publish() call, to allow outgoing messages to be
      tracked.  This callback is important because even if the publish() call
      returns success, it does not always mean that the message has been sent.

    on_subscribe(mosq, userdata, mid, granted_qos): called when the broker
      responds to a subscribe request. The mid variable matches the mid
      variable returned from the corresponding subscribe() call. The
      granted_qos variable is a list of integers that give the QoS level the
      broker has granted for each of the different subscription requests.

    on_unsubscribe(mosq, userdata, mid): called when the broker responds to an
      unsubscribe request. The mid variable matches the mid variable returned
      from the corresponding unsubscribe() call.

    on_log(mosq, userdata, level, buf): called when the client has log
      information. Define to allow debugging. The level variable gives the
      severity of the message and will be one of MOSQ_LOG_INFO,
      MOSQ_LOG_NOTICE, MOSQ_LOG_WARNING, MOSQ_LOG_ERR, and MOSQ_LOG_DEBUG. The
      message itself is in buf.

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"client_id is the unique client id string used when connecting to the
        broker. If client_id is zero length or None, then one will be randomly
        generated. In this case, clean_session must be True. If this is not the
        case a ValueError will be raised.

        clean_session is a boolean that determines the client type. If True,
        the broker will remove all information about this client when it
        disconnects. If False, the client is a persistent client and
        subscription information and queued messages will be retained when the
        client disconnects.
        Note that a client will never discard its own outgoing messages on
        disconnect. Calling connect() or reconnect() will cause the messages to
        be resent.  Use reinitialise() to reset a client to its original state.

        userdata is user defined data of any type that is passed as the
        \"userdata\" parameter to callbacks. It may be updated at a later point
        with the user_data_set() function.
        \"\"\"" code nil (reparse-symbol indented_block_body) [13113 14153])
                            ("if" code nil (reparse-symbol indented_block_body) [14162 14315])
                            ("self" variable nil (reparse-symbol indented_block_body) [14324 14349])
                            ("self" variable nil (reparse-symbol indented_block_body) [14358 14375])
                            ("self" variable nil (reparse-symbol indented_block_body) [14384 14404])
                            ("self" variable nil (reparse-symbol indented_block_body) [14413 14437])
                            ("self" variable nil (reparse-symbol indented_block_body) [14446 14472])
                            ("self" variable nil (reparse-symbol indented_block_body) [14481 14516])
                            ("if" code nil (reparse-symbol indented_block_body) [14525 14724])
                            ("self" variable nil (reparse-symbol indented_block_body) [14733 14752])
                            ("self" variable nil (reparse-symbol indented_block_body) [14761 14780])
                            ("self" variable nil (reparse-symbol indented_block_body) [14789 14826])
                            ("self" variable nil (reparse-symbol indented_block_body) [14835 14856])
                            ("self" variable nil (reparse-symbol indented_block_body) [14865 14896])
                            ("self" variable nil (reparse-symbol indented_block_body) [14905 14936])
                            ("self" variable nil (reparse-symbol indented_block_body) [14945 14977])
                            ("self" variable nil (reparse-symbol indented_block_body) [14986 15002])
                            ("self" variable nil (reparse-symbol indented_block_body) [15011 15029])
                            ("self" variable nil (reparse-symbol indented_block_body) [15038 15063])
                            ("self" variable nil (reparse-symbol indented_block_body) [15072 15091])
                            ("self" variable nil (reparse-symbol indented_block_body) [15100 15132])
                            ("self" variable nil (reparse-symbol indented_block_body) [15141 15168])
                            ("self" variable nil (reparse-symbol indented_block_body) [15177 15195])
                            ("self" variable nil (reparse-symbol indented_block_body) [15204 15225])
                            ("self" variable nil (reparse-symbol indented_block_body) [15234 15259])
                            ("self" variable nil (reparse-symbol indented_block_body) [15268 15286])
                            ("self" variable nil (reparse-symbol indented_block_body) [15295 15320])
                            ("self" variable nil (reparse-symbol indented_block_body) [15329 15354])
                            ("self" variable nil (reparse-symbol indented_block_body) [15363 15385])
                            ("self" variable nil (reparse-symbol indented_block_body) [15394 15416])
                            ("self" variable nil (reparse-symbol indented_block_body) [15425 15447])
                            ("self" variable nil (reparse-symbol indented_block_body) [15456 15480])
                            ("self" variable nil (reparse-symbol indented_block_body) [15489 15515])
                            ("self" variable nil (reparse-symbol indented_block_body) [15524 15542])
                            ("self" variable nil (reparse-symbol indented_block_body) [15551 15566])
                            ("self" variable nil (reparse-symbol indented_block_body) [15575 15592])
                            ("self" variable nil (reparse-symbol indented_block_body) [15601 15624])
                            ("self" variable nil (reparse-symbol indented_block_body) [15633 15658])
                            ("self" variable nil (reparse-symbol indented_block_body) [15667 15696])
                            ("self" variable nil (reparse-symbol indented_block_body) [15705 15744])
                            ("self" variable nil (reparse-symbol indented_block_body) [15753 15789])
                            ("self" variable nil (reparse-symbol indented_block_body) [15798 15839])
                            ("self" variable nil (reparse-symbol indented_block_body) [15848 15897])
                            ("self" variable nil (reparse-symbol indented_block_body) [15906 15944])
                            ("self" variable nil (reparse-symbol indented_block_body) [15953 15991])
                            ("self" variable nil (reparse-symbol indented_block_body) [16000 16019])
                            ("self" variable nil (reparse-symbol indented_block_body) [16028 16058])
                            ("self" variable nil (reparse-symbol indented_block_body) [16067 16083])
                            ("self" variable nil (reparse-symbol indented_block_body) [16092 16117])
                            ("self" variable nil (reparse-symbol indented_block_body) [16126 16150])
                            ("self" variable nil (reparse-symbol indented_block_body) [16159 16184])
                            ("self" variable nil (reparse-symbol indented_block_body) [16193 16219])
                            ("self" variable nil (reparse-symbol indented_block_body) [16228 16252])
                            ("self" variable nil (reparse-symbol indented_block_body) [16261 16287])
                            ("self" variable nil (reparse-symbol indented_block_body) [16296 16321])
                            ("self" variable nil (reparse-symbol indented_block_body) [16330 16359])
                            ("self" variable nil (reparse-symbol indented_block_body) [16368 16411]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13049 13053])
                            ("client_id" variable nil (reparse-symbol function_parameters) [13055 13064])
                            ("clean_session" variable nil (reparse-symbol function_parameters) [13069 13082])
                            ("userdata" variable nil (reparse-symbol function_parameters) [13089 13097]))                          
                        :documentation "client_id is the unique client id string used when connecting to the
        broker. If client_id is zero length or None, then one will be randomly
        generated. In this case, clean_session must be True. If this is not the
        case a ValueError will be raised.

        clean_session is a boolean that determines the client type. If True,
        the broker will remove all information about this client when it
        disconnects. If False, the client is a persistent client and
        subscription information and queued messages will be retained when the
        client disconnects.
        Note that a client will never discard its own outgoing messages on
        disconnect. Calling connect() or reconnect() will cause the messages to
        be resent.  Use reinitialise() to reset a client to its original state.

        userdata is user defined data of any type that is passed as the
        \"userdata\" parameter to callbacks. It may be updated at a later point
        with the user_data_set() function.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13036 16412])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16429 16433]))                          )
                        (reparse-symbol indented_block_body) [16417 16449])
                    ("reinitialise" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16471 16475])
                            ("client_id" variable nil (reparse-symbol function_parameters) [16477 16486])
                            ("clean_session" variable nil (reparse-symbol function_parameters) [16491 16504])
                            ("userdata" variable nil (reparse-symbol function_parameters) [16511 16519]))                          )
                        (reparse-symbol indented_block_body) [16454 16782])
                    ("tls_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16799 16803])
                            ("ca_certs" variable nil (reparse-symbol function_parameters) [16805 16813])
                            ("certfile" variable nil (reparse-symbol function_parameters) [16815 16823])
                            ("keyfile" variable nil (reparse-symbol function_parameters) [16830 16837])
                            ("cert_reqs" variable nil (reparse-symbol function_parameters) [16844 16853])
                            ("tls_version" variable nil (reparse-symbol function_parameters) [16873 16884])
                            ("ciphers" variable nil (reparse-symbol function_parameters) [16905 16912]))                          
                        :documentation "Configure network encryption and authentication options. Enables SSL/TLS support.

        ca_certs : a string path to the Certificate Authority certificate files
        that are to be treated as trusted by this client. If this is the only
        option given then the client will operate in a similar manner to a web
        browser. That is to say it will require the broker to have a
        certificate signed by the Certificate Authorities in ca_certs and will
        communicate using TLS v1, but will not attempt any form of
        authentication. This provides basic network encryption but may not be
        sufficient depending on how the broker is configured.

        certfile and keyfile are strings pointing to the PEM encoded client
        certificate and private keys respectively. If these arguments are not
        None then they will be used as client information for TLS based
        authentication.  Support for this feature is broker dependent. Note
        that if either of these files in encrypted and needs a password to
        decrypt it, Python will ask for the password at the command line. It is
        not currently possible to define a callback to provide the password.

        cert_reqs allows the certificate requirements that the client imposes
        on the broker to be changed. By default this is ssl.CERT_REQUIRED,
        which means that the broker must provide a certificate. See the ssl
        pydoc for more information on this parameter.

        tls_version allows the version of the SSL/TLS protocol used to be
        specified. By default TLS v1 is used. Previous versions (all versions
        beginning with SSL) are possible but not recommended due to possible
        security problems.

        ciphers is a string specifying which encryption ciphers are allowable
        for this connection, or None to use the defaults. See the ssl pydoc for
        more information.

        Must be called before connect() or connect_async().")
                        (reparse-symbol indented_block_body) [16787 19988])
                    ("tls_insecure_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20014 20018])
                            ("value" variable nil (reparse-symbol function_parameters) [20020 20025]))                          
                        :documentation "Configure verification of the server hostname in the server certificate.

        If value is set to true, it is impossible to guarantee that the host
        you are connecting to is not impersonating your server. This can be
        useful in initial server testing, but makes it possible for a malicious
        third party to impersonate your server through DNS spoofing, for
        example.

        Do not use this function in a real system. Setting value to true means
        there is no point using encryption.

        Must be called before connect().")
                        (reparse-symbol indented_block_body) [19993 20640])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20657 20661])
                            ("host" variable nil (reparse-symbol function_parameters) [20663 20667])
                            ("port" variable nil (reparse-symbol function_parameters) [20669 20673])
                            ("keepalive" variable nil (reparse-symbol function_parameters) [20680 20689])
                            ("bind_address" variable nil (reparse-symbol function_parameters) [20694 20706]))                          
                        :documentation "Connect to a remote broker.

        host is the hostname or IP address of the remote broker.
        port is the network port of the server host to connect to. Defaults to
        1883. Note that the default port for MQTT over SSL/TLS is 8883 so if
        you are using tls_set() the port may need providing.
        keepalive: Maximum period in seconds between communications with the
        broker. If no other messages are being exchanged, this controls the
        rate at which the client will send ping messages to the broker.
        ")
                        (reparse-symbol indented_block_body) [20645 21367])
                    ("connect_async" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21390 21394])
                            ("host" variable nil (reparse-symbol function_parameters) [21396 21400])
                            ("port" variable nil (reparse-symbol function_parameters) [21402 21406])
                            ("keepalive" variable nil (reparse-symbol function_parameters) [21413 21422])
                            ("bind_address" variable nil (reparse-symbol function_parameters) [21427 21439]))                          
                        :documentation "Connect to a remote broker asynchronously. This is a non-blocking
        connect call that can be used with loop_start() to provide very quick
        start.

        host is the hostname or IP address of the remote broker.
        port is the network port of the server host to connect to. Defaults to
        1883. Note that the default port for MQTT over SSL/TLS is 8883 so if
        you are using tls_set() the port may need providing.
        keepalive: Maximum period in seconds between communications with the
        broker. If no other messages are being exchanged, this controls the
        rate at which the client will send ping messages to the broker.
        ")
                        (reparse-symbol indented_block_body) [21372 22894])
                    ("reconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22913 22917]))                          
                        :documentation "Reconnect the client after a disconnect. Can only be called after
        connect()/connect_async().")
                        (reparse-symbol indented_block_body) [22899 25336])
                    ("loop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25350 25354])
                            ("timeout" variable nil (reparse-symbol function_parameters) [25356 25363])
                            ("max_packets" variable nil (reparse-symbol function_parameters) [25369 25380]))                          
                        :documentation "Process network events.

        This function must be called regularly to ensure communication with the
        broker is carried out. It calls select() on the network socket to wait
        for network events. If incoming data is present it will then be
        processed. Outgoing commands, from e.g. publish(), are normally sent
        immediately that their function is called, but this is not always
        possible. loop() will also attempt to send any remaining outgoing
        messages, which also includes commands that are part of the flow for
        messages with QoS>0.

        timeout: The time in seconds to wait for incoming/outgoing network
          traffic before timing out and returning.
        max_packets: Not currently used.

        Returns MOSQ_ERR_SUCCESS on success.
        Returns >0 on error.

        A ValueError will be raised if timeout < 0")
                        (reparse-symbol indented_block_body) [25341 27424])
                    ("publish" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27441 27445])
                            ("topic" variable nil (reparse-symbol function_parameters) [27447 27452])
                            ("payload" variable nil (reparse-symbol function_parameters) [27454 27461])
                            ("qos" variable nil (reparse-symbol function_parameters) [27468 27471])
                            ("retain" variable nil (reparse-symbol function_parameters) [27475 27481]))                          
                        :documentation "Publish a message on a topic.

        This causes a message to be sent to the broker and subsequently from
        the broker to any clients subscribing to matching topics.

        topic: The topic that the message should be published on.
        payload: The actual message to send. If not given, or set to None a
        zero length message will be used. Passing an int or float will result
        in the payload being converted to a string representing that number. If
        you wish to send a true int/float, use struct.pack() to create the
        payload you require.
        qos: The quality of service level to use.
        retain: If set to true, the message will be set as the \"last known
        good\"/retained message for the topic.

        Returns a tuple (result, mid), where result is MOSQ_ERR_SUCCESS to
        indicate success or MOSQ_ERR_NO_CONN if the client is not currently
        connected.  mid is the message ID for the publish request. The mid
        value can be used to track the publish request by checking against the
        mid argument in the on_publish() callback if it is defined.

        A ValueError will be raised if topic is None, has zero length or is
        invalid (contains a wildcard), if qos is not one of 0, 1 or 2, or if
        the length of the payload is greater than 268435455 bytes.")
                        (reparse-symbol indented_block_body) [27429 31076])
                    ("username_pw_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31101 31105])
                            ("username" variable nil (reparse-symbol function_parameters) [31107 31115])
                            ("password" variable nil (reparse-symbol function_parameters) [31117 31125]))                          
                        :documentation "Set a username and optionally a password for broker authentication.

        Must be called before connect() to have any effect.
        Requires a broker that supports MQTT v3.1.

        username: The username to authenticate with. Need have no relationship
                  to the client id.
        password: The password to authenticate with. Optional, set to None if
                  not required.
        ")
                        (reparse-symbol indented_block_body) [31081 31630])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31650 31654]))                          
                        :documentation "Disconnect a connected client from the broker.")
                        (reparse-symbol indented_block_body) [31635 31964])
                    ("subscribe" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31983 31987])
                            ("topic" variable nil (reparse-symbol function_parameters) [31989 31994])
                            ("qos" variable nil (reparse-symbol function_parameters) [31996 31999]))                          
                        :documentation "Subscribe the client to a topic.

        sub: The subscription topic to subscribe to.
        qos: The desired quality of service level for the subscription.

        Returns a tuple (result, mid), where result is MOSQ_ERR_SUCCESS
        to indicate success or MOSQ_ERR_NO_CONN if the client is not currently
        connected.
        mid is the message ID for the subscribe request. The mid value can be
        used to track the subscribe request by checking against the mid
        argument in the on_subscribe() callback if it is defined.

        Raises a ValueError if qos is not 0, 1 or 2, or if topic is None or has
        zero string length.
        ")
                        (reparse-symbol indented_block_body) [31969 33036])
                    ("unsubscribe" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33057 33061])
                            ("topic" variable nil (reparse-symbol function_parameters) [33063 33068]))                          
                        :documentation "Unsubscribe the client from a topic.

        sub: The subscription topic to unsubscribe from.

        Returns a tuple (result, mid), where result is MOSQ_ERR_SUCCESS
        to indicate success or MOSQ_ERR_NO_CONN if the client is not currently
        connected.
        mid is the message ID for the unsubscribe request. The mid value can be
        used to track the unsubscribe request by checking against the mid
        argument in the on_unsubscribe() callback if it is defined.

        Raises a ValueError if topic is None or has zero string length.
        ")
                        (reparse-symbol indented_block_body) [33041 33927])
                    ("loop_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33946 33950])
                            ("max_packets" variable nil (reparse-symbol function_parameters) [33952 33963]))                          
                        :documentation "Process read network events. Use in place of calling loop() if you
        wish to handle your client reads as part of your own application.

        Use socket() to obtain the client socket to call select() or equivalent
        on.

        Do not use if you are using the threaded interface loop_start().")
                        (reparse-symbol indented_block_body) [33932 34738])
                    ("loop_write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34758 34762])
                            ("max_packets" variable nil (reparse-symbol function_parameters) [34764 34775]))                          
                        :documentation "Process read network events. Use in place of calling loop() if you
        wish to handle your client reads as part of your own application.

        Use socket() to obtain the client socket to call select() or equivalent
        on.

        Use want_write() to determine if there is data waiting to be written.

        Do not use if you are using the threaded interface loop_start().")
                        (reparse-symbol indented_block_body) [34743 35630])
                    ("want_write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35650 35654]))                          
                        :documentation "Call to determine if there is network data waiting to be written.
        Useful if you are calling select() yourself rather than using loop().
        ")
                        (reparse-symbol indented_block_body) [35635 35953])
                    ("loop_misc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35972 35976]))                          
                        :documentation "Process miscellaneous network events. Use in place of calling loop()
        if you wish to call select() or equivalent on.

        Do not use if you are using the threaded interface loop_start().")
                        (reparse-symbol indented_block_body) [35958 37407])
                    ("max_inflight_messages_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37442 37446])
                            ("inflight" variable nil (reparse-symbol function_parameters) [37448 37456]))                          
                        :documentation "Set the maximum number of messages with QoS>0 that can be part way
        through their network flow at once. Defaults to 20.")
                        (reparse-symbol indented_block_body) [37412 37722])
                    ("message_retry_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37749 37753])
                            ("retry" variable nil (reparse-symbol function_parameters) [37755 37760]))                          
                        :documentation "Set the timeout in seconds before a message with QoS>0 is retried.
        20 seconds by default.")
                        (reparse-symbol indented_block_body) [37727 37981])
                    ("reconnect_delay_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38010 38014])
                            ("delay" variable nil (reparse-symbol function_parameters) [38016 38021])
                            ("delay_max" variable nil (reparse-symbol function_parameters) [38023 38032])
                            ("exponential_backoff" variable nil (reparse-symbol function_parameters) [38034 38053]))                          
                        :documentation "Set the amount of time that the client will wait before reconnecting
        after losing its connection to the broker.

        delay is the number of seconds to wait between successive reconnect
        attempts. By default this is set to 1.

        delay_max is the maximum number of seconds to wait between reconnection
        attempts and is also set to 1 by default. This means that the default
        behaviour is to attempt to reconnect every second.

        If exponential_backoff is False and delay_max is greater than delay,
        then on each successive reconnect failure the delay will increase
        linearly in the form delay*failure_count.

        If exponential_backoff is True and delay_max is greater than delay,
        then on each successive reconnect failure the delay will increase
        exponentially in the form delay*failure_count^2.

        In both cases, the maximum delay ever used is set by delay_max.

        Example 1:
            delay=2, delay_max=10, exponential_backoff=False

            Delays would be: 2, 4, 6, 8, 10, 10, ...

        Example 2:
            delay=3, delay_max=30, exponential_backoff=True

            Delays would be: 3, 6, 12, 24, 30, 30, ...
        ")
                        (reparse-symbol indented_block_body) [37986 39817])
                    ("user_data_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39840 39844])
                            ("userdata" variable nil (reparse-symbol function_parameters) [39846 39854]))                          
                        :documentation "Set the user data variable passed to callbacks. May be any data
        type.")
                        (reparse-symbol indented_block_body) [39822 39983])
                    ("will_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40001 40005])
                            ("topic" variable nil (reparse-symbol function_parameters) [40007 40012])
                            ("payload" variable nil (reparse-symbol function_parameters) [40014 40021])
                            ("qos" variable nil (reparse-symbol function_parameters) [40028 40031])
                            ("retain" variable nil (reparse-symbol function_parameters) [40035 40041]))                          
                        :documentation "Set a Will to be sent by the broker in case the client disconnects
        unexpectedly.

        This must be called before connect() to have any effect.

        topic: The topic that the will message should be published on.
        payload: The message to send as a will. If not given, or set to None a
        zero length message will be used as the will. Passing an int or float
        will result in the payload being converted to a string representing
        that number. If you wish to send a true int/float, use struct.pack() to
        create the payload you require.
        qos: The quality of service level to use for the will.
        retain: If set to true, the will message will be set as the \"last known
        good\"/retained message for the topic.

        Raises a ValueError if qos is not 0, 1 or 2, or if topic is None or has
        zero string length.
        ")
                        (reparse-symbol indented_block_body) [39988 41642])
                    ("will_clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41662 41666]))                          
                        :documentation " Removes a will that was previously configured with will_set().

        Must be called before connect() to have any effect.")
                        (reparse-symbol indented_block_body) [41647 41960])
                    ("socket" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41976 41980]))                          
                        :documentation "Return the socket or ssl object for this client.")
                        (reparse-symbol indented_block_body) [41965 42141])
                    ("loop_forever" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42163 42167])
                            ("timeout" variable nil (reparse-symbol function_parameters) [42169 42176])
                            ("max_packets" variable nil (reparse-symbol function_parameters) [42182 42193]))                          
                        :documentation "This function call loop() for you in an infinite blocking loop. It
        is useful for the case where you only want to run the MQTT client loop
        in your program.

        loop_forever() will handle reconnecting for you. If you call
        disconnect() in a callback it will return.")
                        (reparse-symbol indented_block_body) [42146 44608])
                    ("loop_start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44628 44632]))                          
                        :documentation "This is part of the threaded client interface. Call this once to
        start a new thread to process network traffic. This provides an
        alternative to repeatedly calling loop() yourself.
        ")
                        (reparse-symbol indented_block_body) [44613 45056])
                    ("loop_stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45075 45079])
                            ("force" variable nil (reparse-symbol function_parameters) [45081 45086]))                          
                        :documentation "This is part of the threaded client interface. Call this once to
        stop the network thread previously created with loop_start(). This call
        will block until the network thread finishes.

        The force parameter is currently ignored.
        ")
                        (reparse-symbol indented_block_body) [45061 45530])
                    ("_loop_rc_handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45714 45718])
                            ("rc" variable nil (reparse-symbol function_parameters) [45720 45722]))                          )
                        (reparse-symbol indented_block_body) [45694 46387])
                    ("_packet_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46409 46413]))                          )
                        (reparse-symbol indented_block_body) [46392 50739])
                    ("_packet_write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50762 50766]))                          )
                        (reparse-symbol indented_block_body) [50744 52834])
                    ("_easy_log" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52853 52857])
                            ("level" variable nil (reparse-symbol function_parameters) [52859 52864])
                            ("buf" variable nil (reparse-symbol function_parameters) [52866 52869]))                          )
                        (reparse-symbol indented_block_body) [52839 52954])
                    ("_check_keepalive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52980 52984]))                          )
                        (reparse-symbol indented_block_body) [52959 54269])
                    ("_mid_generate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54292 54296]))                          )
                        (reparse-symbol indented_block_body) [54274 54440])
                    ("_topic_wildcard_len_check" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54475 54479])
                            ("topic" variable nil (reparse-symbol function_parameters) [54481 54486]))                          )
                        (reparse-symbol indented_block_body) [54445 54858])
                    ("_send_pingreq" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54881 54885]))                          )
                        (reparse-symbol indented_block_body) [54863 55086])
                    ("_send_pingresp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55110 55114]))                          )
                        (reparse-symbol indented_block_body) [55091 55227])
                    ("_send_puback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55249 55253])
                            ("mid" variable nil (reparse-symbol function_parameters) [55255 55258]))                          )
                        (reparse-symbol indented_block_body) [55232 55401])
                    ("_send_pubcomp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55424 55428])
                            ("mid" variable nil (reparse-symbol function_parameters) [55430 55433]))                          )
                        (reparse-symbol indented_block_body) [55406 55578])
                    ("_pack_remaining_length" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55610 55614])
                            ("packet" variable nil (reparse-symbol function_parameters) [55616 55622])
                            ("remaining_length" variable nil (reparse-symbol function_parameters) [55624 55640]))                          )
                        (reparse-symbol indented_block_body) [55583 56178])
                    ("_pack_str16" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56199 56203])
                            ("packet" variable nil (reparse-symbol function_parameters) [56205 56211])
                            ("data" variable nil (reparse-symbol function_parameters) [56213 56217]))                          )
                        (reparse-symbol indented_block_body) [56183 57263])
                    ("_send_publish" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57286 57290])
                            ("mid" variable nil (reparse-symbol function_parameters) [57292 57295])
                            ("topic" variable nil (reparse-symbol function_parameters) [57297 57302])
                            ("payload" variable nil (reparse-symbol function_parameters) [57304 57311])
                            ("qos" variable nil (reparse-symbol function_parameters) [57318 57321])
                            ("retain" variable nil (reparse-symbol function_parameters) [57325 57331])
                            ("dup" variable nil (reparse-symbol function_parameters) [57339 57342]))                          )
                        (reparse-symbol indented_block_body) [57268 59304])
                    ("_send_pubrec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59326 59330])
                            ("mid" variable nil (reparse-symbol function_parameters) [59332 59335]))                          )
                        (reparse-symbol indented_block_body) [59309 59478])
                    ("_send_pubrel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59500 59504])
                            ("mid" variable nil (reparse-symbol function_parameters) [59506 59509])
                            ("dup" variable nil (reparse-symbol function_parameters) [59511 59514]))                          )
                        (reparse-symbol indented_block_body) [59483 59663])
                    ("_send_command_with_mid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59695 59699])
                            ("command" variable nil (reparse-symbol function_parameters) [59701 59708])
                            ("mid" variable nil (reparse-symbol function_parameters) [59710 59713])
                            ("dup" variable nil (reparse-symbol function_parameters) [59715 59718]))                          )
                        (reparse-symbol indented_block_body) [59668 59979])
                    ("_send_simple_command" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60009 60013])
                            ("command" variable nil (reparse-symbol function_parameters) [60015 60022]))                          )
                        (reparse-symbol indented_block_body) [59984 60221])
                    ("_send_connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60244 60248])
                            ("keepalive" variable nil (reparse-symbol function_parameters) [60250 60259])
                            ("clean_session" variable nil (reparse-symbol function_parameters) [60261 60274]))                          )
                        (reparse-symbol indented_block_body) [60226 62027])
                    ("_send_disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62053 62057]))                          )
                        (reparse-symbol indented_block_body) [62032 62113])
                    ("_send_subscribe" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62138 62142])
                            ("dup" variable nil (reparse-symbol function_parameters) [62144 62147])
                            ("topic" variable nil (reparse-symbol function_parameters) [62149 62154])
                            ("topic_qos" variable nil (reparse-symbol function_parameters) [62156 62165]))                          )
                        (reparse-symbol indented_block_body) [62118 62667])
                    ("_send_unsubscribe" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62694 62698])
                            ("dup" variable nil (reparse-symbol function_parameters) [62700 62703])
                            ("topic" variable nil (reparse-symbol function_parameters) [62705 62710]))                          )
                        (reparse-symbol indented_block_body) [62672 63159])
                    ("_message_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63184 63188])
                            ("mid" variable nil (reparse-symbol function_parameters) [63190 63193])
                            ("direction" variable nil (reparse-symbol function_parameters) [63195 63204])
                            ("state" variable nil (reparse-symbol function_parameters) [63206 63211]))                          )
                        (reparse-symbol indented_block_body) [63164 63576])
                    ("_message_retry_check" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63606 63610]))                          )
                        (reparse-symbol indented_block_body) [63581 64395])
                    ("_messages_reconnect_reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64430 64434]))                          )
                        (reparse-symbol indented_block_body) [64400 65204])
                    ("_packet_queue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65227 65231])
                            ("command" variable nil (reparse-symbol function_parameters) [65233 65240])
                            ("packet" variable nil (reparse-symbol function_parameters) [65242 65248])
                            ("mid" variable nil (reparse-symbol function_parameters) [65250 65253])
                            ("qos" variable nil (reparse-symbol function_parameters) [65255 65258]))                          )
                        (reparse-symbol indented_block_body) [65209 65844])
                    ("_packet_handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65868 65872]))                          )
                        (reparse-symbol indented_block_body) [65849 66859])
                    ("_handle_pingreq" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66884 66888]))                          )
                        (reparse-symbol indented_block_body) [66864 67117])
                    ("_handle_pingresp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67143 67147]))                          )
                        (reparse-symbol indented_block_body) [67122 67441])
                    ("_handle_connack" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67466 67470]))                          )
                        (reparse-symbol indented_block_body) [67446 68325])
                    ("_handle_suback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68349 68353]))                          )
                        (reparse-symbol indented_block_body) [68330 68947])
                    ("_handle_publish" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68972 68976]))                          )
                        (reparse-symbol indented_block_body) [68952 71289])
                    ("_handle_pubrel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71313 71317]))                          )
                        (reparse-symbol indented_block_body) [71294 72828])
                    ("_update_inflight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72854 72858]))                          )
                        (reparse-symbol indented_block_body) [72833 73600])
                    ("_handle_pubrec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73624 73628]))                          )
                        (reparse-symbol indented_block_body) [73605 74309])
                    ("_handle_unsuback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74335 74339]))                          )
                        (reparse-symbol indented_block_body) [74314 74907])
                    ("_handle_pubackcomp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74935 74939])
                            ("cmd" variable nil (reparse-symbol function_parameters) [74941 74944]))                          )
                        (reparse-symbol indented_block_body) [74912 76494])
                    ("_thread_main" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76516 76520]))                          )
                        (reparse-symbol indented_block_body) [76499 76799])
                    ("_tls_match_hostname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76828 76832]))                          )
                        (reparse-symbol indented_block_body) [76804 77828]))                  
                :type "class")
                nil [9115 77828]))          
      :file "mosquitto.py"
      :pointmax 77829
      :fsize 77828
      :lastmodtime '(21225 10195 0 0)
      :unmatched-syntax '((INDENT_BLOCK 51305 . 51650) (NEWLINE 51304 . 51305) (COLON 51303 . 51304) (TRY 50918 . 50921) (AS 51297 . 51299) (INDENT_BLOCK 50265 . 50420) (NEWLINE 50264 . 50265) (COLON 50263 . 50264) (ELSE 50259 . 50263) (INDENT_BLOCK 49959 . 50247) (NEWLINE 49958 . 49959) (COLON 49957 . 49958) (TRY 49721 . 49724) (AS 49951 . 49953) (INDENT_BLOCK 48798 . 49475) (NEWLINE 48797 . 48798) (COLON 48796 . 48797) (ELSE 48792 . 48796) (INDENT_BLOCK 48464 . 48776) (NEWLINE 48463 . 48464) (COLON 48462 . 48463) (TRY 48256 . 48259) (AS 48456 . 48458) (INDENT_BLOCK 47890 . 48065) (NEWLINE 47889 . 47890) (COLON 47888 . 47889) (ELSE 47884 . 47888) (INDENT_BLOCK 47584 . 47872) (NEWLINE 47583 . 47584) (COLON 47582 . 47583) (TRY 47390 . 47393) (AS 47576 . 47578) (INDENT_BLOCK 44561 . 44590) (NEWLINE 44560 . 44561) (COLON 44559 . 44560) (TRY 44467 . 44470) (AS 44553 . 44555) (INDENT_BLOCK 24460 . 24553) (NEWLINE 24459 . 24460) (COLON 24458 . 24459) (TRY 24072 . 24075) (AS 24452 . 24454) (INDENT_BLOCK 19733 . 19759) (NEWLINE 19732 . 19733) (COLON 19731 . 19732) (ELSE 19727 . 19731) (INDENT_BLOCK 19658 . 19715) (NEWLINE 19657 . 19658) (COLON 19656 . 19657) (TRY 19579 . 19582) (AS 19650 . 19652) (INDENT_BLOCK 19509 . 19535) (NEWLINE 19508 . 19509) (COLON 19507 . 19508) (ELSE 19503 . 19507) (INDENT_BLOCK 19433 . 19491) (NEWLINE 19432 . 19433) (COLON 19431 . 19432) (TRY 19353 . 19356) (AS 19425 . 19427) (INDENT_BLOCK 19286 . 19308) (NEWLINE 19285 . 19286) (COLON 19284 . 19285) (ELSE 19280 . 19284) (INDENT_BLOCK 19218 . 19272) (NEWLINE 19217 . 19218) (COLON 19216 . 19217) (TRY 19146 . 19149) (AS 19210 . 19212))))
  :file "!usr!lib!python3.3!site-packages!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
